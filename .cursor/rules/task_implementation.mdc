---
description: Task Implementation
globs:
alwaysApply: false
---

# Task Implementation Rule

## Overview
This rule guides agents through systematic implementation of tasks following the documented plan step-by-step.

## Prerequisites
- `tasks/{task_name}/implementation.md` must exist and be complete
- User has approved the implementation plan

## Branch Management
**CRITICAL**: Before any code changes:
1. Check current git branch
2. If on `main`/`master` or branch doesn't match planned changes:
   - Notify user about current branch
   - Suggest creating new branch with logical name
   - Wait for user confirmation
   - Create branch only after user approval

## Implementation Process

### Step-by-Step Execution
1. **Load Plan**: Read `tasks/{task_name}/implementation.md`
2. **Initial Context Review**: Read essential context documents once at the start:
   - Read `tasks/{task_name}/research.md` for overall context and decisions
   - Check `tasks/{task_name}/plan.md` for approach and constraints
3. **Follow Hierarchy**: Work through phases in order, then steps within each phase
4. **Work on First Incomplete Step**: 
   - Identify first step not marked as completed
   - **Consult Step-Specific Documentation**: Read only the files listed in that step's "Documentation References" section
   - Complete all tasks within that step sequentially
   - Think before implementing each task, using referenced documentation as guidance
   - Mark tasks as completed `[x]` in real-time
5. **Step Completion**: Mark step as completed when all tasks done
6. **Milestone Reporting**: After each step, STOP and provide:
   - Summary of accomplishments
   - Any deviations or issues
   - Confirmation before proceeding

### Documentation Utilization
**CRITICAL**: Leverage planning documentation efficiently during implementation:

#### Before Each Step
- **Read Step-Specific References**: Consult only the files listed in that step's "Documentation References" section
- **Apply Context**: Use the initial context from research.md and plan.md as background knowledge

#### During Implementation
- **Follow Referenced Patterns**: Use the specific samples and examples referenced for that step
- **Apply Documented Insights**: Incorporate findings from the referenced documentation
- **Reference Best Practices**: Follow patterns documented in the step's referenced files

#### Documentation Quality Checks
- **Verify Referenced Samples**: Ensure step-specific referenced samples are complete and usable
- **Validate Step Assumptions**: Confirm assumptions relevant to the current step are still valid

#### Handling Missing Documentation
If step-specific referenced documentation is missing or inadequate:
1. **Notify User**: Explain what referenced documentation is missing or insufficient
2. **Request Clarification**: Ask for the specific missing samples or documentation
3. **Proceed with Caution**: If user approves, proceed but document assumptions
4. **Note Gap**: Document the missing reference for future planning improvement

### Plan Adherence
- **Follow documented plan exactly** unless deviations necessary
- If deviation needed:
  - Explain why planned approach won't work
  - Propose alternative approach
  - Ask user for approval
  - Update implementation plan

### Documentation
- Update `tasks/{task_name}/implementation.md` in real-time:
  - Mark completed tasks with `[x]`
  - Mark completed steps with `[x]`
  - Mark documentation references as consulted `[x]`
  - Add notes about deviations
- Create `tasks/{task_name}/changes.md` documenting:
  - Files modified
  - Key changes made
  - Decisions made
  - Documentation and samples utilized
  - Any issues with planning documentation

## Validation
After completing all steps:
1. **Identify validation opportunities**:
   - Can changes be compiled/built?
   - Are there existing tests to run?
   - Can functionality be manually tested?
2. **Perform validation**:
   - Run builds, tests, or checks
   - Verify functionality works
   - Check for regressions
3. **Handle failures**:
   - Ask user if they want help fixing issues
   - Respect user's choice if they decline

## Success Criteria
Implementation complete when:
- All steps marked complete in implementation plan
- All planned code changes made
- Validation passes (if applicable)
- Documentation updated
- User confirms satisfaction
